from django.db import models
from django.utils.translation import gettext as _


class SportType(models.Model):
    """
    Вид спорта

    9. Одиннадцатый знак отмечает пол и возрастную категорию занимающихся видом спорта, спортивной дисциплиной:
    9.1. А — мужчины, юноши (юниоры).
    9.2. Б — женщины, девушки (юниорки).
    9.3. Г — мужчины, юноши (юниоры), женщины.
    9.4. Д — девушки (юниорки).
    9.5. Е — мужчины, девушки (юниорки).
    9.6. Ж — женщины.
    9.7. К — мужчины, женщины, девушки (юниорки).
    9.8. Л — мужчины, женщины.
    9.9. М — мужчины.
    9.10. Н — юноши (юниоры), девушки (юниорки).
    9.11. С — юноши (юниоры), девушки (юниорки), женщины.
    9.12. Ф — мужчины, юноши (юниоры), девушки (юниорки).
    9.13. Э — юноши (юниоры), женщины.
    9.14. Ю — юноши (юниоры).
    9.15. Я — все категории[2].
    """

    code_id = models.CharField(
        verbose_name=_("Код"),
        max_length=25,
    )
    name = models.CharField(
        verbose_name=_("Наименование"),
        max_length=250,
    )
    is_actual = models.BooleanField(_("Является актуальным"), default=False)

    SEASON = {
        False: {
            "1": "летний неигровой вид спорта",
            "2": "летний игровой вид спорта",
            "3": "зимний неигровой вид спорта",
            "4": "зимний игровой вид спорта",
            "5": "внесезонный, неигровой вид спорта",
            "6": "внесезонный, игровой вид спорта",
            "7": "внесезонный вид спорта, содержащий как игровые,"
            + " так и неигровые спортивные дисциплины",
            "8": "летний вид спорта, содержащий как игровые,"
            + " так и неигровые спортивные дисциплины",
            "9": "зимний вид спорта, содержащий как игровые,"
            + " так и неигровые спортивные дисциплины",
        },
        True: {
            "1": "летняя неигровая спортивная дисциплина",
            "2": "летняя игровая спортивная дисциплина",
            "3": "зимняя неигровая спортивная дисциплина",
            "4": "зимняя игровая спортивная дисциплина",
        },
    }

    PROPAGATION = {
        False: {
            "1": "военно-прикладной или служебно-прикладной вид спорта,"
            + " развивается в рамках деятельности одного"
            + " или нескольких федеральных органов исполнительной власти",
            "2": "вид спорта развивается в пределах одного из субъектов"
            + " Российской Федерации — национальный вид спорта",
            "3": "вид спорта развивается спортивными федерациями, получил"
            + " развитие только в Российской Федерации",
            "4": "вид спорта развивается международной спортивной федерацией",
            "5": "вид спорта развивается международной спортивной федерацией,"
            + " получил признание Международного олимпийского"
            + " комитета (далее — МОК)",
            "6": "вид спорта развивается международной спортивной федерацией,"
            + " получил признание МОК и включён в программу Олимпийских игр",
            "7": "вид спорта инвалидов и лиц с ограниченными возможностями"
            + " здоровья, развивается международной спортивной федерацией",
        },
        True: {
            "1": "спортивная дисциплина военно-прикладного или"
            + " служебно-прикладного вида спорта",
            "2": "спортивная дисциплина национального вида спорта",
            "6": "спортивная дисциплина вида спорта, указанного"
            + " в подпункте 6.1.6. и включённая в программу Олимпийских игр",
            "7": "спортивная дисциплина вида спорта инвалидов"
            + " и лиц с ограниченными возможностями здоровья",
            "8": "спортивная дисциплина видов спорта, указанных в"
            + " подпунктах 6.1.3. — 6.1.5., а также вида спорта,"
            + " указанного в подпункте 6.1.6. и не включённая"
            + " в программу Олимпийских игр.",
        },
    }

    DEVELOPMENT = {
        "1": "руководство развитием вида спорта федеральными органами"
        + " исполнительно власти не осуществляется",
        "2": "Минобороны России",
        "3": "МЧС России",
        "4": "ФСКН России",
        "5": "ГФС России",
        "6": "Федеральная таможенная служба",
        "9": "ФСО России",
        "Л": "МЧС России, ФСО России",
        "М": "ФСКН России, МВД России",
        "Н": "ФСО России, МВД России, ГУСП",
        "Р": "ФСО России, Федеральная таможенная служба, ГУСП",
        "С": "ФСБ России, ФСО России, МВД России, ГУСП",
        "Ф": "Минюст России, ФССП России, ФСИН России, ФСО России",
        "Э": "ФСКН России, ФССП России, ФСИН России, ФСО России, ГУСП,"
        + " Минюст России, МВД России",
        "Ю": "ФСБ России, ФСКН России, ФССП России, ФСО России,"
        + " Федеральная таможенная служба, МВД России,"
        + " СВР России, ГУСП, ФМС России",
        "Я": "ФСБ России, ФСКН России, Минюст России, ФССП России,"
        + " ФСИН России, ФСО России, ГФС России,"
        + " Федеральная таможенная служба, МВД России, СВР России, ГУСП",
    }

    EXTRA = {
        "1": "не имеется ограничений",
        "2": "имеются ограничения, установленные федеральным"
        + " органом исполнительной власти"
        + " в области физической культуры и спорта",
        "3": "национальный вид спорта Республики Саха (Якутии)",
        "4": "национальный вид спорта Республики Татарстан (Татарстана)",
        "5": "национальный вид спорта Чувашской Республики — Чувашии",
    }

    @property
    def is_discipline(self):
        """
        Вида спорта является дисциплиной
        """
        return self.code_id[3:6] != "000"

    @property
    def discipline_id(self):
        """
        Публичный идентификатор диссциплины
        в рамках вида спорта
        """
        return self.code_id[3:6]

    @property
    def public_id(self):
        """
        Публичный идентификатор вида спорта
        """
        if self.code_id == "" or self.code_id is None:
            return None
        return self.code_id[0:3]

    @property
    def get_seaseon_id(self):
        return self.code_id[7]

    @property
    def get_seaseon_label(self):
        return self.SEASON[self.is_discipline][self.code_id[7]]

    @property
    def get_propagation_id(self):
        return self.code_id[8]

    @property
    def get_propagation_label(self):
        return self.PROPAGATION[self.is_discipline][self.code_id[8]]

    @property
    def get_development_label(self):
        return self.DEVELOPMENT[self.code_id[9]]

    @property
    def get_extra_id(self):
        return self.code_id[10]

    @property
    def get_extra_label(self):
        return self.EXTRA[self.code_id[10]]

    class Meta:
        verbose_name = _("Вид спорта")
        verbose_name_plural = _("Виды спорта")
