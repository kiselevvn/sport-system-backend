@startuml

    class "Explanation of the symbols used" as DESCRIPTION #FFF {
    - AutoField (identifiers)
    ..
    + Regular field (anything)
    ..
    # ForeignKey (ManyToMany)
    ..
    ~ ForeignKey (OneToOne, OneToMany)
    --
}


class "users.User <1. Пользователи>" as users.User #d6def4 {
    пользователь
    ..
    Пользователь системы
    --
    - id (AutoField) - ID
    + password (CharField) - пароль
    + last_login (DateTimeField) - последний вход
    + is_superuser (BooleanField) - Указывает, что пользователь имеет все права без
явного их назначения.
    + username (CharField) - Обязательное поле. Не более 150 символов. Только
буквы, цифры и символы @/./+/-/_.
    + first_name (CharField) - Имя
    + last_name (CharField) - Фамилия
    + second_name (CharField) - Отчество
    + gender (IntegerField) - Пол
    + is_sportsman (BooleanField) - Пользователь является спортсменом
    + is_employee (BooleanField) - Пользователь является сотрудником
    + email (EmailField) - Адрес электронной почты
    + is_staff (BooleanField) - Имеет допуск к django-admin
    + birthday (DateField) - Дата рождения
    + is_active (BooleanField) - Является активныи
    + date_joined (DateTimeField) - дата регистрации
    ~ sportsman_organiztion_group (ForeignKey) - Группа
    ~ sportsman_organiztion_child_group (ForeignKey) - Подгруппа
    + settings (JSONField) - Настройки клиента
    # groups (ManyToManyField) - Группы, к которым принадлежит данный пользователь.
Пользователь получит все права, указанные в каждой из его/её групп.
    # user_permissions (ManyToManyField) - Индивидуальные права данного
пользователя.
    --
}
users.User *-- organization.EducationGroup
users.User *-- organization.ChildGroup
users.User *--* auth.Group
users.User *--* auth.Permission


class "users.ProxyGroup <1. Пользователи>" as users.ProxyGroup #d6def4 {
    Группа
    ..
    ProxyGroup(id, name)
    --
    - id (AutoField) - ID
    + name (CharField) - имя
    # permissions (ManyToManyField) - права
    --
}
users.ProxyGroup *--* auth.Permission


class "users.Sportsman <1. Пользователи>" as users.Sportsman #d6def4 {
    Спортсмен
    ..
    Спортсмен
    --
    - id (AutoField) - ID
    + password (CharField) - пароль
    + last_login (DateTimeField) - последний вход
    + is_superuser (BooleanField) - Указывает, что пользователь имеет все права без
явного их назначения.
    + username (CharField) - Обязательное поле. Не более 150 символов. Только
буквы, цифры и символы @/./+/-/_.
    + first_name (CharField) - Имя
    + last_name (CharField) - Фамилия
    + second_name (CharField) - Отчество
    + gender (IntegerField) - Пол
    + is_sportsman (BooleanField) - Пользователь является спортсменом
    + is_employee (BooleanField) - Пользователь является сотрудником
    + email (EmailField) - Адрес электронной почты
    + is_staff (BooleanField) - Имеет допуск к django-admin
    + birthday (DateField) - Дата рождения
    + is_active (BooleanField) - Является активныи
    + date_joined (DateTimeField) - дата регистрации
    ~ sportsman_organiztion_group (ForeignKey) - Группа
    ~ sportsman_organiztion_child_group (ForeignKey) - Подгруппа
    + settings (JSONField) - Настройки клиента
    # groups (ManyToManyField) - Группы, к которым принадлежит данный пользователь.
Пользователь получит все права, указанные в каждой из его/её групп.
    # user_permissions (ManyToManyField) - Индивидуальные права данного
пользователя.
    --
}
users.Sportsman *-- organization.EducationGroup
users.Sportsman *-- organization.ChildGroup
users.Sportsman *--* auth.Group
users.Sportsman *--* auth.Permission


class "users.Employee <1. Пользователи>" as users.Employee #d6def4 {
    Сотрудник
    ..
    Сотрудник
    --
    - id (AutoField) - ID
    + password (CharField) - пароль
    + last_login (DateTimeField) - последний вход
    + is_superuser (BooleanField) - Указывает, что пользователь имеет все права без
явного их назначения.
    + username (CharField) - Обязательное поле. Не более 150 символов. Только
буквы, цифры и символы @/./+/-/_.
    + first_name (CharField) - Имя
    + last_name (CharField) - Фамилия
    + second_name (CharField) - Отчество
    + gender (IntegerField) - Пол
    + is_sportsman (BooleanField) - Пользователь является спортсменом
    + is_employee (BooleanField) - Пользователь является сотрудником
    + email (EmailField) - Адрес электронной почты
    + is_staff (BooleanField) - Имеет допуск к django-admin
    + birthday (DateField) - Дата рождения
    + is_active (BooleanField) - Является активныи
    + date_joined (DateTimeField) - дата регистрации
    ~ sportsman_organiztion_group (ForeignKey) - Группа
    ~ sportsman_organiztion_child_group (ForeignKey) - Подгруппа
    + settings (JSONField) - Настройки клиента
    # groups (ManyToManyField) - Группы, к которым принадлежит данный пользователь.
Пользователь получит все права, указанные в каждой из его/её групп.
    # user_permissions (ManyToManyField) - Индивидуальные права данного
пользователя.
    --
}
users.Employee *-- organization.EducationGroup
users.Employee *-- organization.ChildGroup
users.Employee *--* auth.Group
users.Employee *--* auth.Permission


@enduml
